varying vec3 normal, eyeVec;
#define MAX_LIGHTS 8
#define NUM_LIGHTS 4
varying vec3 lightDir[MAX_LIGHTS];
varying float att[MAX_LIGHTS];
uniform sampler2D texture1;

void main (void)
{
	vec4 final_color = gl_FrontLightModelProduct.sceneColor * gl_FrontMaterial.ambient;
	vec3 N = normalize(normal);
	int i;
	for (i=0; i<NUM_LIGHTS; ++i)
	{
		vec3 D = normalize(gl_LightSource[i].spotDirection);
		vec3 L = normalize(lightDir[i]);
		if (0.0 == gl_LightSource[i].position.w)
		{
			att[i] = 1.0;
			L = normalize(vec3(gl_LightSource[i].position));
		} 	
		if(dot(-L, D) > gl_LightSource[i].spotCosCutoff)
		{	
			float lambertTerm = dot(N,L);
			if (lambertTerm > 0.0)
			{
				if(gl_LightSource[i].spotCutoff <= 90.0 && 0.0 != gl_LightSource[i].position.w) 
				{
					att[i] *= pow(gl_LightSource[i].spotCosCutoff, gl_LightSource[i].spotExponent);	
				}
				
				vec3 E = normalize(eyeVec);
				vec3 R = reflect(-L, N);
				float specular = pow(max(dot(R, E), 0.0), gl_FrontMaterial.shininess);

				final_color += gl_LightSource[i].ambient * gl_FrontMaterial.ambient * att[i];
				final_color +=gl_LightSource[i].diffuse * gl_FrontMaterial.diffuse * lambertTerm * att[i];
				final_color +=gl_LightSource[i].specular * gl_FrontMaterial.specular * specular * att[i];
			}
		}
	}
	gl_FragColor = final_color;
}